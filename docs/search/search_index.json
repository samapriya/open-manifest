{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Introduction to Open Manifest Library"},{"location":"contact/","text":"Contact Us Contact me: Samapriya Roy: samapriya.roy@gmail.com","title":"Contact Us"},{"location":"contact/#contact-us","text":"","title":"Contact Us"},{"location":"contact/#contact-me","text":"Samapriya Roy: samapriya.roy@gmail.com","title":"Contact me:"},{"location":"projects/citations/","text":"Citing Open Manifest Open manifest is a community effort that I hope to grow and convert into an online submission tool, as Earth Engine evolves over a period of time, methods to ingest and look at data sets and collections might change. But we hope this acts as a community library for manifest submission and allowing for data harmonization for field, remote datasets (both commercial and public datasets) To cite Open Manifest in publications, please use the following: Open Manifest Team (2017). Open Manifest for Data Harmonization: Community Ingestion tool for Google Earth Engine","title":"Citations"},{"location":"projects/citations/#citing-open-manifest","text":"Open manifest is a community effort that I hope to grow and convert into an online submission tool, as Earth Engine evolves over a period of time, methods to ingest and look at data sets and collections might change. But we hope this acts as a community library for manifest submission and allowing for data harmonization for field, remote datasets (both commercial and public datasets) To cite Open Manifest in publications, please use the following: Open Manifest Team (2017). Open Manifest for Data Harmonization: Community Ingestion tool for Google Earth Engine","title":"Citing Open Manifest"},{"location":"projects/components/","text":"Submit Metadata The second method will be to create a better submissions mechanism where you would be able to submit a metadata file of type either an xml or json file and I will work on increasing the format and types of files it can read and parse. Some images ,may not have metadata files but you may still want some metadata during ingestion to be added to it for example number of bands, rows and columns, minima and maxima for the image and so on. GDAL gives us a simple read that allows us to read these stats and create a manifest file from that, this is also useful if there are additionla information in GeoTIFF headers embedded in the imagery. This feature will be made available to you using a tool that you can run at your end and avoid the need to upload large images.","title":"Submit Image and Metadata"},{"location":"projects/components/#submit-metadata","text":"The second method will be to create a better submissions mechanism where you would be able to submit a metadata file of type either an xml or json file and I will work on increasing the format and types of files it can read and parse. Some images ,may not have metadata files but you may still want some metadata during ingestion to be added to it for example number of bands, rows and columns, minima and maxima for the image and so on. GDAL gives us a simple read that allows us to read these stats and create a manifest file from that, this is also useful if there are additionla information in GeoTIFF headers embedded in the imagery. This feature will be made available to you using a tool that you can run at your end and avoid the need to upload large images.","title":"Submit Metadata"},{"location":"projects/ee-manifest/","text":"Manifests in Earth Engine Once you have a manifest, you can now build a custom ingestor that will allow you push datasets based assets and your metadata. This can be achieved by changing the primary Path and point it to the gs:// image and add the metadata values. { id : , bands : [{ id : b1 }, { id : b2 }, { id : b3 }, { id : b4 }], missingData : { value : 0 }, properties : { system:time_start : , product_type : , orbit : , provider : , instrument : , satellite_id : , number_of_bands : , epsg_code : , resampling_kernel : , number_of_rows : , number_of_columns : , gsd : , cloud_cover : , incidence_angle : , sun_azimuth : , sun_elevation : , azimuth_angle : , spacecraft_angle : , radiometric_scale_factor : , reflectance_coefficient_b1 : , reflectance_coefficient_b2 : , reflectance_coefficient_b3 : , reflectance_coefficient_b4 : }, tilesets : [{ sources : [{ primaryPath : }] }] } Once you modify this to include the metadata and image path, and write this to a JSON file you can simply use the earthengine upload_manifest tool to upload the image. earthengine upload_manifest \"full path to your manifest json file\" A universal ingestor would allow us to - use these manifests as plug and play to ingest imagery along with metadata. - This will also allow users to modify manifests to create metadata for images that have already been ingested.","title":"Manifest in Earth Engine"},{"location":"projects/ee-manifest/#manifests-in-earth-engine","text":"Once you have a manifest, you can now build a custom ingestor that will allow you push datasets based assets and your metadata. This can be achieved by changing the primary Path and point it to the gs:// image and add the metadata values. { id : , bands : [{ id : b1 }, { id : b2 }, { id : b3 }, { id : b4 }], missingData : { value : 0 }, properties : { system:time_start : , product_type : , orbit : , provider : , instrument : , satellite_id : , number_of_bands : , epsg_code : , resampling_kernel : , number_of_rows : , number_of_columns : , gsd : , cloud_cover : , incidence_angle : , sun_azimuth : , sun_elevation : , azimuth_angle : , spacecraft_angle : , radiometric_scale_factor : , reflectance_coefficient_b1 : , reflectance_coefficient_b2 : , reflectance_coefficient_b3 : , reflectance_coefficient_b4 : }, tilesets : [{ sources : [{ primaryPath : }] }] } Once you modify this to include the metadata and image path, and write this to a JSON file you can simply use the earthengine upload_manifest tool to upload the image. earthengine upload_manifest \"full path to your manifest json file\" A universal ingestor would allow us to - use these manifests as plug and play to ingest imagery along with metadata. - This will also allow users to modify manifests to create metadata for images that have already been ingested.","title":"Manifests in Earth Engine"},{"location":"projects/eesetup/","text":"Registering for a Google Earth Engine Account If you don\u2019t have a developer account sign up for one here and make sure you follow the instructions to install the python CLI. The API and the CLI gets updated frequently and as does the install process as needed so you can read the latest instructions at the page.","title":"Registering for a Google Earth Engine Account"},{"location":"projects/eesetup/#registering-for-a-google-earth-engine-account","text":"If you don\u2019t have a developer account sign up for one here and make sure you follow the instructions to install the python CLI. The API and the CLI gets updated frequently and as does the install process as needed so you can read the latest instructions at the page.","title":"Registering for a Google Earth Engine Account"},{"location":"projects/license/","text":"MIT License Copyright 2018 Samapriya Roy Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"<center>**MIT License**</center>"},{"location":"projects/license/#mit-license","text":"Copyright 2018 Samapriya Roy Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"projects/motivation/","text":"Motivation and Outline The motivation for this project actually came from my working with trying to get Planet labs and Digital Globe datasets in Google Earth Engine while respecting and maintaining large portions of their attached metadata. Though the Earth Engine Code Editor allows users to edit metadata per asset, this would be time consuming for large batch assets and could be achieved programatically post ingestion.With this in mind and while working on this tool, I started to upload datasets with a manifest that Earth Engine could accept. Earth Engine Upload Tool Around the same time that Google Earth Engine Python Client actually introduced upload_manifest and upload_table_manifest as two options to upload imagery as well as upload shapefiles or tables. I realized that as I started to ingest and play with other datasets such as Satellogic Hyperspectral data or aerial imagery , it would be great to build an open source library of manifests that allow for other users to feed in specific fields and ingest data with complete metadata based on their manifest format. Earth Engine Upload Manifest tool This would also harmonize multiuser same sensor datasets like from drones with the same exact sensors as well as multi user and multi sensor datasets allowing you to submit the manifest type that you could then request as the bare minima of metadata needed for an ingest. Currently you can find the manifest files here and I will be adding additional sensors soon. This project is designed to be open source and the manifest format follows recommended and shared manifest examples from Google Earth Engine. Example Manifest Single Band WorldView-2 PanChromatic Only We are also hoping to create an open source auto-ingestor for people submitting images and metadata files for an end to end delivery. This project is part of a proposal in development, and you can check back for more updates when we have something to share. We hope that in the future, this Open Manifest library will be user contributed and will continue to grow as users add more sensor manifests or collaborate with us to build your first manifest. For now, this is exploring only image manifests and not table manifests but can be modified to do the same. I see the potential of using something like this to standardize manifests for field work that have been tabulated and so on.","title":"Motivation and Setup"},{"location":"projects/motivation/#motivation-and-outline","text":"The motivation for this project actually came from my working with trying to get Planet labs and Digital Globe datasets in Google Earth Engine while respecting and maintaining large portions of their attached metadata. Though the Earth Engine Code Editor allows users to edit metadata per asset, this would be time consuming for large batch assets and could be achieved programatically post ingestion.With this in mind and while working on this tool, I started to upload datasets with a manifest that Earth Engine could accept. Earth Engine Upload Tool Around the same time that Google Earth Engine Python Client actually introduced upload_manifest and upload_table_manifest as two options to upload imagery as well as upload shapefiles or tables. I realized that as I started to ingest and play with other datasets such as Satellogic Hyperspectral data or aerial imagery , it would be great to build an open source library of manifests that allow for other users to feed in specific fields and ingest data with complete metadata based on their manifest format. Earth Engine Upload Manifest tool This would also harmonize multiuser same sensor datasets like from drones with the same exact sensors as well as multi user and multi sensor datasets allowing you to submit the manifest type that you could then request as the bare minima of metadata needed for an ingest. Currently you can find the manifest files here and I will be adding additional sensors soon. This project is designed to be open source and the manifest format follows recommended and shared manifest examples from Google Earth Engine. Example Manifest Single Band WorldView-2 PanChromatic Only We are also hoping to create an open source auto-ingestor for people submitting images and metadata files for an end to end delivery. This project is part of a proposal in development, and you can check back for more updates when we have something to share. We hope that in the future, this Open Manifest library will be user contributed and will continue to grow as users add more sensor manifests or collaborate with us to build your first manifest. For now, this is exploring only image manifests and not table manifests but can be modified to do the same. I see the potential of using something like this to standardize manifests for field work that have been tabulated and so on.","title":"Motivation and Outline"},{"location":"projects/submit-manifest/","text":"Submit Manifest To add a manifest request Simply open a new Github issue Upload the issue with the metadata json or xml file or any other format. If the image metadata is part of the image header this will depend on the imagery type. Make sure you have permission to upload the metadata and or imagery file. This is a community project, so anyone can fork the repo create the manifest file and create a pull request to be merged. For example a PlanetScope 4Band Analytic Manifest looks like this. Here you will notice that I have added band names as simply b1, b2 and so on but you can modify this to be \"Red\",\"Green\",\"NIR\" and so on as needed. This is an example of an empty manifest though I have filled in the bandnames for ease. You can build an ingestion manifest that automatically parses your files and then gets it ready for upload into Google Earth Engine. { id : , bands : [{ id : b1 }, { id : b2 }, { id : b3 }, { id : b4 }], missingData : { value : 0 }, properties : { system:time_start : , product_type : , orbit : , provider : , instrument : , satellite_id : , number_of_bands : , epsg_code : , resampling_kernel : , number_of_rows : , number_of_columns : , gsd : , cloud_cover : , incidence_angle : , sun_azimuth : , sun_elevation : , azimuth_angle : , spacecraft_angle : , radiometric_scale_factor : , reflectance_coefficient_b1 : , reflectance_coefficient_b2 : , reflectance_coefficient_b3 : , reflectance_coefficient_b4 : }, tilesets : [{ sources : [{ primaryPath : }] }] } Note : All manifest that are submitted are user contributed and are in no way inclusive of all fields in the manifest. The license allows you to modify and extend the manifests as necessary.","title":"Submit Manifest"},{"location":"projects/submit-manifest/#submit-manifest","text":"To add a manifest request Simply open a new Github issue Upload the issue with the metadata json or xml file or any other format. If the image metadata is part of the image header this will depend on the imagery type. Make sure you have permission to upload the metadata and or imagery file. This is a community project, so anyone can fork the repo create the manifest file and create a pull request to be merged. For example a PlanetScope 4Band Analytic Manifest looks like this. Here you will notice that I have added band names as simply b1, b2 and so on but you can modify this to be \"Red\",\"Green\",\"NIR\" and so on as needed. This is an example of an empty manifest though I have filled in the bandnames for ease. You can build an ingestion manifest that automatically parses your files and then gets it ready for upload into Google Earth Engine. { id : , bands : [{ id : b1 }, { id : b2 }, { id : b3 }, { id : b4 }], missingData : { value : 0 }, properties : { system:time_start : , product_type : , orbit : , provider : , instrument : , satellite_id : , number_of_bands : , epsg_code : , resampling_kernel : , number_of_rows : , number_of_columns : , gsd : , cloud_cover : , incidence_angle : , sun_azimuth : , sun_elevation : , azimuth_angle : , spacecraft_angle : , radiometric_scale_factor : , reflectance_coefficient_b1 : , reflectance_coefficient_b2 : , reflectance_coefficient_b3 : , reflectance_coefficient_b4 : }, tilesets : [{ sources : [{ primaryPath : }] }] } Note : All manifest that are submitted are user contributed and are in no way inclusive of all fields in the manifest. The license allows you to modify and extend the manifests as necessary.","title":"Submit Manifest"}]}